// EncryptData.cpp
// This file uses the input data and key information to encrypt the input data
// code to encrypt the data as specified by the project assignment
#include "Main.h"
int encryptData(char * data, int dataLength){
	int resulti = 0;
	__asm {
		lea esi, data
		mov ecx, dataLength
		dec ecx

		push ebp
		mov ebp, esp

		push esi
		push ecx

		mov ecx, gNumRounds
		push ecx
		mov esi, gptrPasswordHash
		push esi
		mov esi, gptrKey
		push esi
		sub esp, 8		//hop_count = -28
		//cear
		xor eax, eax
		xor ebx, ebx
		xor ecx, ecx
		mov edi, 0
		//fall through
		roundLoop :       //loop starts here for rounds
		lea esi, data
			call getStartIndex
			mov[ebp - 24], eax
			call getHopCount
			mov[ebp - 28], eax
			xor ecx, ecx
			dataLoop :

		lea esi, data
			call getXORBYTE
			push edx
			call getRunningIndex
			call Dstep  //call Dstep
			call Estep  //call Estep
			call Bstep  //call Bstep
			call Astep  //call Astep
			call Cstep  //call Cstep

			mov[esi + ecx], dl
			pop edx
			inc ecx
			cmp ecx, 9	//check for end of data
			je exitDataLoop
			jmp dataLoop
			exitDataLoop :

		inc edi
			cmp edi, gNumRounds		//current round eq to num rounds
			je exitRoundLoop
			jmp roundLoop	//store dl into esi register index by ebx
	//
	/*
				FUNCTION CALLS

	*/
		getStartIndex:
		push ebp
			mov ebp, esp
			xor eax, eax
			mov ah, byte ptr[esi + ecx * 4]
			inc esi
			mov al, byte ptr[esi + ecx * 4]
			mov esp, ebp
			pop ebp
			ret
			getHopCount :
		push ebp
			mov ebp, esp
			mov esi, [ebp + 20]
			add esi, 2
			xor eax, eax
			mov ah, byte ptr[esi + ecx * 4]
			inc esi
			mov al, byte ptr[esi + ecx * 4]
			cmp eax, 0
			je fixHop
			mov esp, ebp
			pop ebp
			ret
			fixHop :
		mov eax, 0xFFFF
			mov esp, ebp
			pop ebp
			ret
			getXORBYTE :
		push ebp
			mov ebp, esp
			push ebx
			push edi
			xor ebx, ebx
			mov ebx, [ebp + 16]	//index
			lea esi, data	//data
			lea edi, [ebp + 20]
			mov al, byte ptr[edi + 20]
			xor edx, edx
			mov[ebp + 8], edx
			xor al, byte ptr[esi + ecx]
			mov byte ptr[ebp + 8], al
			mov dl, al
			pop edi
			pop ebx
			mov esp, ebp
			pop ebp
			ret
			getRunningIndex :
		push ebp
			mov ebp, esp
			mov eax, [ebp + 20]
			add eax, [ebp + 16]
			cmp eax, 65537
			jae fixIndex
			mov[ebp + 16], eax
			mov esp, ebp
			pop ebp
			ret
			fixIndex :
		sub eax, 65537
			mov[ebp + 20], eax
			mov esp, ebp
			pop ebp
			ret
			Dstep :
		push ebp
			mov ebp, esp
			push ebx
			mov esi, [ebp + 40]
			xor ebx, ebx
			mov al, dl
			ror al, 3
			mov byte ptr[ebp + 8], al
			mov dl, al
			pop ebx
			mov esp, ebp
			pop ebp
			ret
			Estep :
		push ebp
			mov ebp, esp
			xor eax, eax
			push ebx
			push edi
			xor ebx, ebx
			mov al, dl
			lea edi, gEncodeTable
			mov bl, byte ptr[edi + eax]
			mov byte ptr[ebp + 8], bl
			mov dl, bl
			pop edi
			pop ebx
			mov esp, ebp
			pop ebp
			ret
			Bstep :
		push ebp
			mov ebp, esp
			push ebx
			xor ebx, ebx
			mov esi, [ebp + 40]
			mov al, dl //dl //store hex value into al
			xor al, 01001001b   //invert bits 0,3,6
			mov byte ptr[ebp + 8], al
			mov dl, al
			pop ebx
			mov esp, ebp
			pop ebp
			ret     //return to previous position
			Astep :
		push ebp
			mov ebp, esp
			push edx
			push ebx
			xor eax, eax
			mov esi, [ebp + 40]
			mov edx, 0
			mov ebx, 0  //clear ecx
			mov al, dl //move & zero extend value at ebp+8 into eax
			jmp reverse_bit   //jump to LoopBit function
			reverse_bit :
		shl al, 1  //shift al left by 1
			rcr dl, 1  //rotate and carry cl by 1
			cmp ebx, 7
			je reverse_comp     // if counter is 7 end the loop
			inc ebx     // else increment count
			jmp reverse_bit    // and keep looping
			reverse_comp :
		mov byte ptr[ebp + 8], bl
			mov dl, bl
			pop ebx
			pop edx
			mov esp, ebp
			pop ebp
			ret   //return to previous position
			Cstep :
		push ebp
			mov ebp, esp
			push eax
			push ebx
			push ecx
			xor ecx, ecx
			xor eax, eax
			mov al, dl
			xor edx, edx
			xor ebx, ebx
			//mov al, byte ptr[ebp + 8] //move esi into eax
			jmp Looper1  //jump to Looper1 function
			Looper1 :
		shr eax, 1 //shift eax right by 1
			rcr ecx, 1 //rotate right and carry ecx by 1
			add bl, 1 //increment ebx by 1
			cmp bl, 1 //compare ebx to 1
			ja MOVE  //if true jump to MOVE
			jmp Looper1 //else jump to Looper1
			MOVE :
		mov edx, ecx //move ecx into edx
			mov bl, 0
			mov ecx, 0 //store 0 into ecx
			jmp SHIFT_OTHER //jump to SHIFT_OTHER function
			SHIFT_OTHER :
		shr eax, 1 //shift eax to the right 1
			rcr ecx, 1 //rotate right and carry edi by 1
			add bl, 1 //increment edi by 1
			cmp bl, 1 //compare edi to 1
			ja OVER  //if true, jump to OVER function
			jmp SHIFT_OTHER //else jump to SHIFT_OTHER
			OVER :
		shr ecx, 2 //shift ecx to the right by 2
			add ecx, edx //increment ecx by edx
			xchg edx, ecx //xchg the register values
			//mov al, dl //store edx into eax
			mov bl, 0
			mov ecx, 0 //store 0 in ecx
			//shr eax, 4 //shift eax right by 4
			jmp Loop2 //jump to Loop2 function
			Loop2 :	//look at eax here
		shr eax, 1 //shift eax to the right by 1
			rcr ecx, 1 //rotate right and carry ecx by 1
			add bl, 1 //increment edi by 1
			cmp bl, 1 //compare edi to 1
			ja EXIT2 //if true jump to EXIT2
			jmp Loop2 //else jump to Loop2
			EXIT2 :
		mov ebx, ecx //move ecx into ebx
			mov ecx, 0 //set ecx to 0
			mov bl, 0 //set edi to 0
			jmp Loop3 //jump to Loop3
			Loop3 :
		shr eax, 1 //shift eax to the right by 1+
			rcr ecx, 1 //rotate right and carry ecx by 1
			add bl, 1 //increment edi by 1
			cmp bl, 1 //compare edi to 1
			ja END3  //jump above END3
			jmp Loop3 //else jump to Loop3
			END3 :
		ror ecx, 2 //rotate ecx right by 2
			mov bl, 0
			add ecx, ebx //increment ecx by ebx
			shr edx, 16 //shift edx to the right by 16
			shr edx, 12 //shift edx to the right by 12
			shr ecx, 16 //shift ecx to the right by 16
			shr ecx, 8 //shift ecx to the right by 8
			add ecx, edx //increment ecx by edx
			mov dl, cl //move al into ebp+
			mov byte ptr[ebp + 8], cl
			pop ecx
			pop ebx
			pop eax
			mov esp, ebp
			pop ebp
			ret
			exitRoundLoop :
		add esp, 28
			mov esp, ebp
			pop ebp
	}
	return resulti;
}
