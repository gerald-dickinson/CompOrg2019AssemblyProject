__asm {

		mov esi, gptrPasswordHash	//gPtrPasswordHash
		xor eax, eax		//set eax to 0
		mov ah, [esi]		//gPasswordHas[0] is in ah
		mov al, [esi + 1]	//gPasswordHash[1] is in al


		mov edi, gptrKey	//store the gptrKey into edi register

		xor ebx, ebx		//clear the ebx register
		xor ecx, ecx		//clear the ecx register

		mov ecx, dataLength	//store the dataLength into the counter register
		xor edx, edx		//clear the edx register
		cmp ecx, 0		//check to see if counter equals 0
		sub ecx, 1		//decrement the counter 
		jbe LENGTH_ZERO		//jump to the LENGTH_ZERO function
		mov esi, data		//store data into esi register
		mov dl, [edi + eax]	//store new value into dl register
	START_OF_LOOP :
			mov al, [esi + ebx]	//store new value into al register
			xor dl, al		//
			movzx edx, dl
			push edx

			call Dstep		//call Dstep
			call Estep		//call Estep
			call Bstep		//call Bstep
			call Astep		//call Astep
			call Cstep		//call Cstep

			add esp, 4	
			mov[esi + ebx], dl	//store dl into esi register index by ebx
			add ebx, 1		//increment ebx
			cmp ebx, ecx		//compare counter to ebx
			ja  END			//if equal, jump to END
			jmp START_OF_LOOP	//else jump to START_OF_LOOP
Dstep :
			push ebp
			mov ebp, esp
			push eax
			xor eax, eax
			mov al, dl
			ror al, 3
			mov dl, al
			pop eax
			mov esp, ebp
			pop ebp
			ret
Estep :
			push ebp
			mov ebp, esp
			push eax
			push ebx
			push esi
			xor eax, eax
			lea esi, gEncodeTable
			movzx eax, dl
			mov bl, [esi + eax]	//
			mov dl, bl
			pop esi
			pop ebx
			pop eax
			mov esp, ebp
			pop ebp
			ret
Bstep :
			push ebp
			mov ebp, esp
			push eax
			xor eax, eax
			mov al, dl	//store hex value into al
			xor al, 01001001b   //invert bits 0,3,6
			mov dl, al	//insert new value back into place 
			pop eax
			mov esp, ebp
			pop ebp
			ret					//return to previous position
Astep :
			push ebp
			mov ebp, esp
			mov esi, ebx
			push eax
			push ebx
			push ecx
			xor eax, eax		//clear eax
			xor ecx, ecx		//clear ecx
			xor ebx, ebx		//clear ebx
			movzx eax, dl//move & zero extend value at ebp+8 into eax
			jmp LoopBit			//jump to LoopBit function
		LoopBit :
			shl al, 1		//shift al left by 1
			rcr cl, 1		//rotate and carry cl by 1
			cmp ebx, 7
			je EndLoop     // if counter is 7 end the loop
			inc ebx      // else increment count
			jmp LoopBit    // and keep looping
		EndLoop :
			movzx edx, cl	//move cl into ebp+8
			mov[ebp + 8], edx
			push ecx
			push ebx
			push eax
			mov esp, ebp
			pop ebp
			ret			//return to previous position
Cstep :
			push ebp
			mov ebp, esp
			push eax
			push ebx
			push ecx
			push esi
			push edi
			push edx
			xor ecx, ecx
			xor eax, eax
			xor edx, edx
			xor ebx, ebx
			xor edi, edi		//clear edi
			mov esi, [ebp + 8]//move & sign extend value at ebp+8 into esi
			mov eax, esi		//move esi into eax
			jmp Looper1		//jump to Looper1 function
		Looper1 :
			shr eax, 1	//shift eax right by 1
			rcr ecx, 1	//rotate right and carry ecx by 1
			add ebx, 1	//increment ebx by 1
			cmp ebx, 1	//compare ebx to 1
			ja MOVE		//if true jump to MOVE
			jmp Looper1	//else jump to Looper1
		MOVE :
			mov edx, ecx	//move ecx into edx
			mov ecx, 0	//store 0 into ecx
			mov edi, 0	//store 0 into edi
			jmp SHIFT_OTHER	//jump to SHIFT_OTHER function
		SHIFT_OTHER :
			shr eax, 1	//shift eax to the right 1
			rcr ecx, 1	//rotate right and carry edi by 1
			add edi, 1	//increment edi by 1
			cmp edi, 1	//compare edi to 1
			ja OVER		//if true, jump to OVER function
			jmp SHIFT_OTHER	//else jump to SHIFT_OTHER
		OVER :
			mov edi, 0	//store 0 into edi
			shr ecx, 2	//shift ecx to the right by 2
			add ecx, edx	//increment ecx by edx
			xchg edx, ecx	//xchg the register values
			mov eax, esi	//store esi into eax
			mov ecx, 0	//store 0 in ecx
			shr eax, 4	//shift eax right by 4
			jmp Loop2	//jump to Loop2 function
		Loop2 :
			shr eax, 1	//shift eax to the right by 1
			rcr ecx, 1	//rotate right and carry ecx by 1
			add edi, 1	//increment edi by 1
			cmp edi, 1	//compare edi to 1
			ja EXIT2	//if true jump to EXIT2
			jmp Loop2	//else jump to Loop2
		EXIT2 :
			mov ebx, ecx	//move ecx into ebx
			mov ecx, 0	//set ecx to 0
			mov edi, 0	//set edi to 0
			jmp Loop3	//jump to Loop3
		Loop3 :
			shr eax, 1	//shift eax to the right by 1+
			rcr ecx, 1	//rotate right and carry ecx by 1
			add edi, 1	//increment edi by 1
			cmp edi, 1	//compare edi to 1
			ja END3		//jump above END3
			jmp Loop3	//else jump to Loop3
		END3 :
			ror ecx, 2	//rotate ecx right by 2
			add ecx, ebx	//increment ecx by ebx
			shr edx, 16	//shift edx to the right by 16
			shr edx, 12	//shift edx to the right by 12
			shr ecx, 16	//shift ecx to the right by 16
			shr ecx, 8	//shift ecx to the right by 8
			add ecx, edx	//increment ecx by edx
			movzx edx, cl	//move al into ebp+
			pop edi
			pop esi
			pop ecx
			pop ebx
			pop eax
			mov esp, ebp
			pop ebp
			ret

LENGTH_ZERO :
			sub ebx, 1 //decrement ebx by 1
			jmp EXIT	//jump to exit
END :
		xor ebx, ebx	//clear ebx register
EXIT :
		mov resulti, ebx   //store ebx into resulti
	}