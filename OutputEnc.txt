// EncryptData.cpp
// This file uses the input data and key information to encrypt the input data
// code to encrypt the data as specified by the project assignment
#include "Main.h"
int encryptData(char *data, int dataLength){
	int resulti = 0;
	__asm {
		mov esi, data
		mov ecx, dataLength
		dec edx
		push ebp
		mov ebp, esp
		push ecx					//this is DATALENGTH ebp-4
		push esi					//this is DATA ebp-8
		mov ecx, gNumRounds			//16
		push ecx					//pushed gNumRounds    -12
		mov esi, gptrPasswordHash	//gPtrPasswordHash    -16
		push esi					//gPtrPasswordHash is pushe d  -20
		mov esi, gptrKey
		push esi					//gptrKey = -24
		mov eax, 0
		//reserve space???
		push eax			//- 28 STARTING INDEX
		push eax			// -32	hop count
		xor eax, eax
		xor ebx, ebx
		xor ecx, ecx
ROUND_LOOP:							//loop starts here for rounds
		call starting_indexCalc
		call hop_countCalc
		push ecx
		xor ecx, ecx
	START_OF_LOOP :
		call foldBYTE
		call editIndex
		call Dstep		//call Dstep
		call Estep		//call Estep
		call Bstep		//call Bstep
		call Astep		//call Astep
		call Cstep		//call Cstep		
		cmp ecx, [ebp - 4]		//compare counter to ebx
		je ExitLoop			//if equal, jump to END
		inc ecx
		jmp ROUND_LOOP	//else jump to START_OF_LOOP
	ExitLoop:
		pop ecx

		cmp ecx, [ebp - 12]		//eax < ecx		=> 0 < #rounds
		je EXIT_ROUND
		inc ecx
		jmp ROUND_LOOP		//get out of program
starting_indexCalc:
		mov esi, [ebp - 16]
		mov ecx, [ebp - 12]
		mov ah, byte ptr[esi + ecx * 4]
		inc esi
		mov al, byte ptr[esi + ecx * 4]
		mov [ebp-24], eax
		ret				//should return eax as the starting_index
hop_countCalc:
			mov esi, [ebp - 16]
			mov ecx, [ebp - 12]
			add esi, 2
			mov ah, byte ptr[esi + ecx * 4]
			inc esi
			mov al, byte ptr[esi+ ecx * 4]
			mov [ebp - 28], eax
			cmp [ebp - 28], 0
			je FIX
			ret
		FIX:
			mov [ebp - 28], 0xFFFF
			ret
foldBYTE:
		push ebx
		xor ebx, ebx
		mov ebx, [ebp - 24]		//index
		mov esi, [ebp - 8]	//data
		mov edi, [ebp - 20]		//gptrkey
		mov al, byte ptr[edi+ebx]
		xor al, byte ptr[esi + ecx]
		mov byte ptr[esi + ecx], al
		pop ebx
		ret
editIndex:
		mov eax, [ebp - 24]
		add eax, [ebp - 28]
		cmp eax, 0x10001
		jae FIX_I
		mov [ebp - 24], eax
		ret
	FIX_I:
		sub eax, 0x10001
		mov [ebp - 24], eax
		ret
Dstep :


			push eax
			mov esi, [ebp - 8]
			xor eax, eax
			mov al, byte ptr[esi + ecx]
			ror al, 3
			mov dl, al
			mov byte ptr [esi+ecx], al
			pop eax
			ret
Estep :

			mov esi, [ebp - 8]
			xor eax, eax
			push ebx
			xor ebx, ebx
			mov al, byte ptr[esi+ecx]
			lea edi, gEncodeTable
			mov bl, byte ptr [edi + eax]
			mov byte ptr[esi + ecx], bl
			pop ebx
			pop eax
			ret
Bstep :

			push eax
			mov esi, [ebp - 8]
			xor eax, eax
			mov al, byte ptr[ esi+ecx]	//dl	//store hex value into al
			xor al, 01001001b   //invert bits 0,3,6
			mov dl, al	//insert new value back into place 
			mov byte ptr[esi + ecx], al
			pop eax
			ret					//return to previous position
Astep :
			push eax
			push ebx
			mov esi, [ebp - 8]
			mov eax, 0
			mov ebx, 0		//clear ecx
			mov al, byte ptr[esi + ecx]	//move & zero extend value at ebp+8 into eax
			jmp reverse_bit			//jump to LoopBit function
	reverse_bit :
			shl al, 1		//shift al left by 1
			rcr bl, 1		//rotate and carry cl by 1
			cmp ah, 7
			je reverse_comp     // if counter is 7 end the loop
			inc ah     // else increment count
			jmp reverse_bit    // and keep looping
	reverse_comp :
			mov dl, bl	//move cl into ebp+8
			mov byte ptr[esi + ecx], bl
			pop ebx
			pop eax
			ret			//return to previous position
Cstep:

			push eax
			push ebx
			push ecx
			xor ecx, ecx
			xor eax, eax
			xor edx, edx
			xor ebx, ebx
			mov esi, [ebp - 8]
			mov al, byte ptr[esi + ecx]	//move esi into eax
			jmp Looper1		//jump to Looper1 function
	Looper1 :
			shr eax, 1	//shift eax right by 1
			rcr ecx, 1	//rotate right and carry ecx by 1
			add bl, 1	//increment ebx by 1
			cmp bl, 1	//compare ebx to 1
			ja MOVE		//if true jump to MOVE
			jmp Looper1	//else jump to Looper1
	MOVE :
			mov edx, ecx	//move ecx into edx
			mov bl, 0
			mov ecx, 0	//store 0 into ecx
			jmp SHIFT_OTHER	//jump to SHIFT_OTHER function
	SHIFT_OTHER :
			shr eax, 1	//shift eax to the right 1
			rcr ecx, 1	//rotate right and carry edi by 1
			add bl, 1	//increment edi by 1
			cmp bl, 1	//compare edi to 1
			ja OVER		//if true, jump to OVER function
			jmp SHIFT_OTHER	//else jump to SHIFT_OTHER
	OVER :
			shr ecx, 2	//shift ecx to the right by 2
			add ecx, edx	//increment ecx by edx
			xchg edx, ecx	//xchg the register values
			movzx eax, byte ptr[esi+ecx]	//store esi into eax
			mov bl, 0
			mov ecx, 0	//store 0 in ecx
			shr eax, 4	//shift eax right by 4
			jmp Loop2	//jump to Loop2 function
	Loop2 :
			shr eax, 1	//shift eax to the right by 1
			rcr ecx, 1	//rotate right and carry ecx by 1
			add bl, 1	//increment edi by 1
			cmp bl, 1	//compare edi to 1
			ja EXIT2	//if true jump to EXIT2
			jmp Loop2	//else jump to Loop2
	EXIT2 :
			mov ebx, ecx	//move ecx into ebx
			mov ecx, 0	//set ecx to 0
			mov bl, 0	//set edi to 0
			jmp Loop3	//jump to Loop3
	Loop3 :
			shr eax, 1	//shift eax to the right by 1+
			rcr ecx, 1	//rotate right and carry ecx by 1
			add bl, 1	//increment edi by 1
			cmp bl, 1	//compare edi to 1
			ja END3		//jump above END3
			jmp Loop3	//else jump to Loop3
	END3 :
			ror ecx, 2	//rotate ecx right by 2
			mov bl, 0
			add ecx, ebx	//increment ecx by ebx
			shr edx, 16	//shift edx to the right by 16
			shr edx, 12	//shift edx to the right by 12
			shr ecx, 16	//shift ecx to the right by 16
			shr ecx, 8	//shift ecx to the right by 8
			add ecx, edx	//increment ecx by edx
			mov dl, cl	//move al into ebp+
			pop ecx
			mov byte ptr[esi + ecx], cl
			pop ebx
			pop eax
			ret
EXIT_ROUND:
	add esp,28
	pop ebp
	}	
	return resulti;
}